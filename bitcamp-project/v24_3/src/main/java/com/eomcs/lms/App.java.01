package com.eomcs.lms;

import java.util.Scanner;
import com.eomcs.lms.domain.Board;
import com.eomcs.lms.domain.Lesson;
import com.eomcs.lms.domain.Member;
import com.eomcs.lms.handler.BoardHandler;
import com.eomcs.lms.handler.LessonHandler;
import com.eomcs.lms.handler.MemberHandler;
import com.eomcs.lms.util.LinkedList;
import com.eomcs.lms.util.Prompt;
import com.eomcs.lms.util.Queue;
import com.eomcs.lms.util.Stack;

// 학습 목표
// - Generalization : 서브 클래스의 공통 분모를 추출하여 수퍼클래스로 정의하고 상속관계를 맺는 것
// - 다형적 변수 : Handler에서 사용할 목록관리 객체를 수퍼클래스의 래퍼런스로 선언하는것
//                 이를 통해 List의 서브 객체로 교체하기 쉽도록 만드는 것
// - DI : Handler가 의존하는 객체를 내부에서 생성하지 않고 생성자를 통해 외부에서 주입 받는 것.
//        이를 통해 의존 객체 교체가 쉽도록 만드는 것
public class App {

  static Scanner keyboard = new Scanner(System.in);

  static Stack<String> commandStack = new Stack<>();
  static Queue<String> commandQueue = new Queue<>();

  public static void main(String[] args) {

    Prompt prompt = new Prompt(keyboard);

    LinkedList<Board> boardList = new LinkedList<>(); 
    BoardHandler boardHandler = new BoardHandler(prompt, boardList);
    LinkedList<Lesson> lessonList = new LinkedList<>(); 
    LessonHandler lessonHandler = new LessonHandler(prompt, lessonList);
    LinkedList<Member> memberList = new LinkedList<>(); 
    MemberHandler memberHandler = new MemberHandler(prompt, memberList);

    String command;

    do {
      System.out.println("\n명령");
      command = keyboard.nextLine();

      if (command.length() == 0)
        continue;

      commandStack.push(command);
      
      commandQueue.offer(command);

      switch (command) {
        case "/lesson/add":

          lessonHandler.addLesson(); 

          break;

        case "/lesson/list":

          lessonHandler.listLesson();

          break;

        case "/lesson/detail":

          lessonHandler.detailLesson();

          break;

        case "/lesson/update":

          lessonHandler.updateLesson();

          break;

        case "/lesson/delete":

          lessonHandler.deleteLesson();

          break;


        case "/member/add":

          memberHandler.addMember();

          break;

        case "/member/list":

          memberHandler.listMember();

          break;

        case "/member/detail":

          memberHandler.detailMember();

          break;

        case "/member/update":

          memberHandler.updateMember();

          break;

        case "/member/delete":

          memberHandler.deleteMember();

          break;

        case "/board/add":

          boardHandler.addBoard();

          break;

        case "/board/list":


          boardHandler.listBoard();
          break;

        case "/board/detail":

          boardHandler.detailBoard();

          break;

        case "/board/update":

          boardHandler.updateBoard();

          break;

        case "/board/delete":

          boardHandler.deleteBoard();

          break;

        case "history":

          printCommandHistory();

          break;
          
        case "history2":

          printCommandHistory2();

          break;


        default:
          if(!command.equalsIgnoreCase("quit")) {
            System.out.println("실행할수 없는 명령입니다.");
          }
      }
    } while (!command.equalsIgnoreCase("quit"));

    System.out.println("안녕!");
    keyboard.close();


  }


  private static void printCommandHistory() {
    Stack<String> historyStack = (Stack<String>) commandStack.clone();
    int count = 0;
    while (!historyStack.empty()) {
      System.out.println(historyStack.pop());
      count++;

      if ((count % 5) == 0) {
        System.out.println(":");
        String str = keyboard.nextLine();
        if (str.equalsIgnoreCase("q"));{
        break;
        }
      }
    }
  }
  
  private static void printCommandHistory2() {
    Queue<String> historyQueue = commandQueue.clone();
    int count = 0;
    
    while (historyQueue.size() > 0) {
      System.out.println(historyQueue.poll());
      
      if ((++count % 5) == 0) {
        System.out.print(":");
        String str = keyboard.nextLine();
        if (str.equalsIgnoreCase("q")) {
          break;
        }
      }
    }
    
  }
  
}







